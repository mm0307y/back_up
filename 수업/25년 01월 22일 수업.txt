2025년 01월 22일 수요일 수업 관련 정리

1. POJO MVC패펀을 직접 설계해서 게시판에 적용해 보기
2. Front-End를 리액트 활용해서 구현하기

- 서버사이드와 클라이언트 사이드에 이해
- 인증/인가
- 구글이나 카카오로그인 API를 활용해서 소셜로그인을 
진행할 때 고려해야 할 상황을 연출한다.
: redirect_url - 어떻게 처리하는지?
- 3000번(리액트)과 8000번(톰캣 - 스프링) 사이의 연계
- POJO & 스프링 부트(전자 정부 프레임 워크)

- 스프링 부트에서 지원하는 어노테이션 종류 정리하기
- 리덕스 소개 -> FLUX아키텍쳐 -> 구독발행모델, 커링함수
- 시간제어가 없다.
- 메모리적으로 지원이 안된다. 문자열처리(쿠키공통분모)같지않다.
- selece한 결과를 리덕스나 쿠키나 세션에 담는 건 아니다.
- 메모리가 아니므로 자료구조를 담을 수 없다.
- 메모리를 사용할 수 없다는건 한정적이다.
- 리덕스와 쿠키와 세션 공통분모 보다는 다른 점이 더 많다.
- DB와 리덕스 동일시 할 수 없다.

=================================================================
서버 사이드
jsp-step1

notice_react
1. 이제 부터는 App.jsx에서 memberListDB를 요청한다.
리액트 페이지가 열릴 때 톰캣(스프링)와 연계 가 시작된다.
3000번 페이지에서  8000번에 있는 URL을 요청을 한다.
3000번 -> 8000번
8000번 -> 3000번

1번에 대해서만 고려하고 싶어요. (단 방향)

3000번 페이지에서 카카오 로그인 버튼이 존재 버튼을 클릭 했을때
1) 인가코드 받기 - 굳이 8000번으로 넘겨서 받아야 하나?
get방식 - 리액트 페이지에서 새로운 요청을 일으킨다. - http프로토콜

window.location.href = 카카오 인증코드 받기 URL
사용자는 카카오로그인 버튼을 클릭했고 -> 카카오서버측 새로운 요청을 전달한다.
https://kauth.kakao.com/oauth/authorize?
response_type=code&
client_id=6b10a8106270f172344447e5cec8953b&
redirect_uri=http://localhost:5000/auth/kakao/callback

CORS에 대한 설정이 필요하다.

@Configuration // 설정관 관련된 객체 주입
public class CorsConfigurer0122 implements WebMvcConfigurer {
     // 구현부 안에서 dot연산자로 연결하는 전개 방식 - 스프링설정에서 많이사용된다. - 람다식 형태
     // 설정에 관련된 메뉴얼 관리 - 형상관리팀 - 읽기가 가능한 정도
  @Override
  public void addCorsMappings(CorsRegistry registry) {
    registry.addMapping("/**") // 모든 요청에 대해서 검토해줘
            .allowedOrigins("http://localhost:3000", "http://localhost:8000") // 허용할 오리진들
            .allowedMethods("GET", "POST", "PUT", "DELETE") // 허용할 HTTP 메서드
            .allowedHeaders("*") // 모든 헤더 허용(오픈 API마다 다른 기준으로)
            .allowCredentials(true) // 쿠키 또는 인증 정보 포함 허용
            .maxAge(3600); // 1시간동안 캐싱
  }
  
}


실습 순서

준비된 것
1. 로그인 화면 
2. 회원가입 화면
미완성인 부분 : 이메일 중복 검사(오라클 연동이 필요하다.) 닉네임 중복검사(오라클 연동이 필요하다.)
카카오 우편번호 검색기(미완성)
3. 기존에 이메일과 비밀번호로 로그인하기는 회원가입 후 오라클을 연동하여 로그인 하리고 변경 처리한다.
4. 이메일 찾기
5. 비빌번호 변경하기 - 구글 로그인 한정하여 처리한다.(구글API로 실습한다.)
: 이메일 기능 추가 - 제외
6. 구글소셜 로그인을 한 후에 오라클 회원테이블에서 가입여부를 체크하고 만일 가입이 안된 회원이면
강제 회원가입을 유도하는 코드로 작성하기
7. 카카오 로그인 부분은 일단 먼저 시도해 보기
: 게시판 구현이 진행될때 - 같이 해본다.
8. 회원가입 구현하기(오라클 여동 + myBatis활용)
: myBatis 를 활용한 동적 쿼리문 처리하기
: 전체선택 후 일괄 삭제하기 - 표준 SQL에서는 한 번에 하나씩 삭제해야 하는 것을
myBatis를 활용하면 일괄삭제 처리가 가능하다.
- 3차 프로젝트 - 복습 중심 : ERP구현하기 - CRUD중심, 전자결제, 전자서명, ... 백엔드 기술지원 유리
9. 본격적으로 게시판 구현 진행하기

추가하기 - 스프링 시큐리티 코딩 - 수업진행

오늘 부터 진행되는 실습 서버 두 개를 모두 기동해야 한다.
백엔드쪽 서버가 없으면 화면조차도 출력이 안된다. - 스트레스 증가..

어플리케이션이 시작되자 마자 왜 회원목록을 체크하는 건가요?
memberListDB 요청

인증/인가

현재 크롬으로 요청을 했나요?