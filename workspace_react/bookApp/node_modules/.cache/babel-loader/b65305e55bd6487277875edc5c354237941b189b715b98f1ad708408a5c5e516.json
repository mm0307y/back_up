{"ast":null,"code":"var _jsxFileName = \"D:\\\\Java\\\\workspace_react\\\\bookApp\\\\src\\\\components0102\\\\auth0102\\\\KakaoCallback0103.jsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useEffect } from 'react';\nimport { useLocation } from 'react-router';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst KakaoCallback0103 = () => {\n  _s();\n  // window.location 보다 리액트에서 제공하는 객체 사용하기\n  const location = useLocation();\n  const code = new URLSearchParams(location.search).get('code');\n  console.log(`카카오에서 redirect_url로 보내준 code값은 : ${code}`);\n  useEffect(() => {\n    const asyncAuth = async () => {\n      try {\n        // Access Token 가져오기\n        const res1 = await axios.post(\"https://kauth.kakao.com/oauth/token\", null, {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\"\n          },\n          params: {\n            grant_type: \"authorization_code\",\n            client_id: \"6b10a8106270f172344447e5cec8953b\",\n            redirect_uri: \"http://localhost:3000/auth/kakao/callback\",\n            code: code\n          }\n        });\n        console.log(res1.data);\n        const accessToken = res1.data.access_token;\n        console.log(\"Access Token : \", accessToken);\n\n        // Access Token을 이용해 사용자 정보 가져오기\n        const res2 = await axios.get(\"https://kapi.kakao.com/v2/user/me\", {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\",\n            \"Authorization\": \"Bearer \" + accessToken\n          }\n        });\n        console.log(res2);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    asyncAuth();\n  }, []); // 의존성 배열이 빈통이면 최초 딱 한번만 실행이 된다.\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"KakaoCallback0103\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(KakaoCallback0103, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n  return [useLocation];\n});\n_c = KakaoCallback0103;\nexport default KakaoCallback0103;\n\n/*\r\n  1. const uri =  https://kauth.kakao.com/oauth/authorize?response_type=code&client_id=6b10a8106270f172344447e5cec8953b&redirect_uri=http://localhost:5000/auth/kakao/callback 요청 발생\r\n  버튼이나 <button onClick=\"\">카카오 로그인</button>\r\n  a태그 <a href=uri>카카오로그인 버튼, 이미지</a>\r\n\r\n  카카오서버에서 음답으로 요청하는 URL로 부터 쿼리스트링에 붙어 있는 code값을 추출한다.\r\n  \r\n*/\nvar _c;\n$RefreshReg$(_c, \"KakaoCallback0103\");","map":{"version":3,"names":["axios","React","useEffect","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","KakaoCallback0103","_s","location","code","URLSearchParams","search","get","console","log","asyncAuth","res1","post","headers","params","grant_type","client_id","redirect_uri","data","accessToken","access_token","res2","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Java/workspace_react/bookApp/src/components0102/auth0102/KakaoCallback0103.jsx"],"sourcesContent":["import axios from 'axios'\r\nimport React, { useEffect } from 'react'\r\nimport { useLocation } from 'react-router'\r\n\r\nconst KakaoCallback0103 = () => {\r\n  // window.location 보다 리액트에서 제공하는 객체 사용하기\r\n  const location = useLocation()\r\n  const code = new URLSearchParams(location.search).get('code')\r\n  console.log(`카카오에서 redirect_url로 보내준 code값은 : ${code}`)\r\n  useEffect(() => {\r\n    const asyncAuth = async () => {\r\n      try {\r\n        // Access Token 가져오기\r\n        const res1 = await axios.post(\"https://kauth.kakao.com/oauth/token\", null, {\r\n          headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\"\r\n          },\r\n\r\n          params: {\r\n            grant_type: \"authorization_code\",\r\n            client_id: \"6b10a8106270f172344447e5cec8953b\",\r\n            redirect_uri: \"http://localhost:3000/auth/kakao/callback\",\r\n            code: code,\r\n          }\r\n        })\r\n        console.log(res1.data)\r\n        const accessToken = res1.data.access_token;\r\n        console.log(\"Access Token : \", accessToken)\r\n\r\n        // Access Token을 이용해 사용자 정보 가져오기\r\n        const res2 = await axios.get(\"https://kapi.kakao.com/v2/user/me\", {\r\n          headers:{\r\n            \"Content-Type\" : \"application/x-www-form-urlencoded;charset=utf-8\",\r\n            \"Authorization\" : \"Bearer \" + accessToken\r\n          }\r\n        })\r\n        console.log(res2)\r\n\r\n      } catch (error) {\r\n        console.error(error)\r\n      }\r\n    }\r\n    asyncAuth()\r\n  }, []) // 의존성 배열이 빈통이면 최초 딱 한번만 실행이 된다.\r\n  return (\r\n    <>\r\n      <div>KakaoCallback0103</div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default KakaoCallback0103\r\n\r\n/*\r\n  1. const uri =  https://kauth.kakao.com/oauth/authorize?response_type=code&client_id=6b10a8106270f172344447e5cec8953b&redirect_uri=http://localhost:5000/auth/kakao/callback 요청 발생\r\n  버튼이나 <button onClick=\"\">카카오 로그인</button>\r\n  a태그 <a href=uri>카카오로그인 버튼, 이미지</a>\r\n\r\n  카카오서버에서 음답으로 요청하는 URL로 부터 쿼리스트링에 붙어 있는 code값을 추출한다.\r\n  \r\n*/"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,cAAc;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B;EACA,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,IAAI,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC,CAACC,GAAG,CAAC,MAAM,CAAC;EAC7DC,OAAO,CAACC,GAAG,CAAC,oCAAoCL,IAAI,EAAE,CAAC;EACvDT,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,IAAI,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,qCAAqC,EAAE,IAAI,EAAE;UACzEC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UAEDC,MAAM,EAAE;YACNC,UAAU,EAAE,oBAAoB;YAChCC,SAAS,EAAE,kCAAkC;YAC7CC,YAAY,EAAE,2CAA2C;YACzDb,IAAI,EAAEA;UACR;QACF,CAAC,CAAC;QACFI,OAAO,CAACC,GAAG,CAACE,IAAI,CAACO,IAAI,CAAC;QACtB,MAAMC,WAAW,GAAGR,IAAI,CAACO,IAAI,CAACE,YAAY;QAC1CZ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEU,WAAW,CAAC;;QAE3C;QACA,MAAME,IAAI,GAAG,MAAM5B,KAAK,CAACc,GAAG,CAAC,mCAAmC,EAAE;UAChEM,OAAO,EAAC;YACN,cAAc,EAAG,iDAAiD;YAClE,eAAe,EAAG,SAAS,GAAGM;UAChC;QACF,CAAC,CAAC;QACFX,OAAO,CAACC,GAAG,CAACY,IAAI,CAAC;MAEnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdd,OAAO,CAACc,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IACDZ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,EAAC;EACP,oBACEZ,OAAA,CAAAE,SAAA;IAAAuB,QAAA,eACEzB,OAAA;MAAAyB,QAAA,EAAK;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC,gBAC5B,CAAC;AAEP,CAAC;AAAAzB,EAAA,CA7CKD,iBAAiB;EAAA,QAEJL,WAAW;AAAA;AAAAgC,EAAA,GAFxB3B,iBAAiB;AA+CvB,eAAeA,iBAAiB;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}