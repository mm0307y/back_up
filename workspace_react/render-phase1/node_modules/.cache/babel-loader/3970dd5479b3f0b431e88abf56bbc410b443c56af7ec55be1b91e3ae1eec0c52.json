{"ast":null,"code":"var _jsxFileName = \"D:\\\\Java\\\\workspace_react\\\\render-phase1\\\\src\\\\BlogApp.jsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport RenderingUI1212 from \"./conmponents1212/RenderingUI1212\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BlogApp = () => {\n  _s();\n  const [state, setState] = useState(0);\n  console.log(\"1\");\n  const handleClick = () => {\n    console.log(\"handleClick호출\");\n  };\n\n  // handleClick함수가 매번 새로 만들어질 필요가 없다.\n  // 왜냐면 변화가 없다.\n  // 메모리에 handleClick\n  const memoizationCallback = useCallback(() => {\n    handleClick();\n  }, []);\n\n  // useEffect 훅은 의존성 배열이 깡동일 때 딱 한번 호출된다.\n  useEffect(() => {\n    console.log('Componen re-rendered');\n    setTimeout(() => {\n      setState(1);\n      console.log('updated');\n    }, 1000);\n  }, []); // Only re-render when state changes\n  // 두 번째 파라미터는 의존성 배열이다.\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(RenderingUI1212, {\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(BlogApp, \"9pNfwRgEinxsL6SaQ64qT+dRVL0=\");\n_c = BlogApp;\nexport default BlogApp;\n/* \n  상태는 바뀌었는데 이 바뀐 상태가 RenderingUI와 아무 상관이 없다.\n  심지어 state를 사용하고 있지도 않다.\n  그런데 state가 변경됨에 의해서 이 BlogApp.jsx파일은 다시 실행이 됐고\n  그 과정에서 RenderingUI1212 컴포넌트도 다시 실행이 되서 무려 100번 실행이 되었다.\n  \n  그럼 이 경우에는 왜 문제가 발생했나?\n  첫번째는 RenderingUI1212 onClick의 props가 일정하지 않다. - 새로 만들어진 함수다.\n  handleClick()은 변경된게 없다.\n  훅(Hook)이 사용되지 않고 선언된 어떤 함수나 값은 매번 BlogApp.jsx파일이 다시\n  실행될 때 마다 새로 할당이 된다.\n  그래서 우리 눈에는 똑같지만 handleClick() 매번 렌더링이 될 때 마다 다른 주소번지를 갖는다.\n  그렇게 달라진 함수 이므로 이것을 props로 넘기는 Rendering1212 태그도 변경이 되는 것이다.\n  즉, props가 변경이 된 것이다.\n  그러면 이 props를 변경되지 않도록 하면 된다. How?\n*/\nvar _c;\n$RefreshReg$(_c, \"BlogApp\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","RenderingUI1212","jsxDEV","_jsxDEV","_Fragment","BlogApp","_s","state","setState","console","log","handleClick","memoizationCallback","setTimeout","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Java/workspace_react/render-phase1/src/BlogApp.jsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\";\nimport RenderingUI1212 from \"./conmponents1212/RenderingUI1212\";\n\nconst BlogApp = () => {\n  const [state, setState] = useState(0)\n  console.log(\"1\")\n  const handleClick = () => {\n    console.log(\"handleClick호출\")\n  }\n\n  // handleClick함수가 매번 새로 만들어질 필요가 없다.\n  // 왜냐면 변화가 없다.\n  // 메모리에 handleClick\n  const memoizationCallback = useCallback(() => {\n    handleClick()\n  },[])\n\n  // useEffect 훅은 의존성 배열이 깡동일 때 딱 한번 호출된다.\n  useEffect(() => {\n    console.log('Componen re-rendered')\n    setTimeout(() => {\n      setState(1)\n      console.log('updated')\n    }, 1000)\n  }, []) // Only re-render when state changes\n  // 두 번째 파라미터는 의존성 배열이다.\n\n  return (\n    <>\n      <RenderingUI1212 onClick={handleClick} />\n    </>\n  );\n}\n\nexport default BlogApp;\n/* \n  상태는 바뀌었는데 이 바뀐 상태가 RenderingUI와 아무 상관이 없다.\n  심지어 state를 사용하고 있지도 않다.\n  그런데 state가 변경됨에 의해서 이 BlogApp.jsx파일은 다시 실행이 됐고\n  그 과정에서 RenderingUI1212 컴포넌트도 다시 실행이 되서 무려 100번 실행이 되었다.\n  \n  그럼 이 경우에는 왜 문제가 발생했나?\n  첫번째는 RenderingUI1212 onClick의 props가 일정하지 않다. - 새로 만들어진 함수다.\n  handleClick()은 변경된게 없다.\n  훅(Hook)이 사용되지 않고 선언된 어떤 함수나 값은 매번 BlogApp.jsx파일이 다시\n  실행될 때 마다 새로 할당이 된다.\n  그래서 우리 눈에는 똑같지만 handleClick() 매번 렌더링이 될 때 마다 다른 주소번지를 갖는다.\n  그렇게 달라진 함수 이므로 이것을 props로 넘기는 Rendering1212 태그도 변경이 되는 것이다.\n  즉, props가 변경이 된 것이다.\n  그러면 이 props를 변경되지 않도록 하면 된다. How?\n*/"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClE,OAAOC,eAAe,MAAM,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAN,QAAA,IAAAO,SAAA;AAEhE,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrCS,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EAChB,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBF,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC9B,CAAC;;EAED;EACA;EACA;EACA,MAAME,mBAAmB,GAAGd,WAAW,CAAC,MAAM;IAC5Ca,WAAW,CAAC,CAAC;EACf,CAAC,EAAC,EAAE,CAAC;;EAEL;EACAZ,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnCG,UAAU,CAAC,MAAM;MACfL,QAAQ,CAAC,CAAC,CAAC;MACXC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACxB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,EAAE,CAAC,EAAC;EACP;;EAEA,oBACEP,OAAA,CAAAC,SAAA;IAAAU,QAAA,eACEX,OAAA,CAACF,eAAe;MAACc,OAAO,EAAEJ;IAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACzC,CAAC;AAEP,CAAC;AAAAb,EAAA,CA7BKD,OAAO;AAAAe,EAAA,GAAPf,OAAO;AA+Bb,eAAeA,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}