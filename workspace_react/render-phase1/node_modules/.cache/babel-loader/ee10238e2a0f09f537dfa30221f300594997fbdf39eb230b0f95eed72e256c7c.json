{"ast":null,"code":"var _jsxFileName = \"D:\\\\Java\\\\workspace_react\\\\render-phase1\\\\src\\\\BlogApp.jsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useEffect, useState } from \"react\";\nimport RenderingUI1212 from \"./conmponents1212/RenderingUI1212\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BlogApp = () => {\n  _s();\n  const [state, setState] = useState(0);\n  console.log(\"1\");\n  const handleClick = () => {\n    console.log(\"handleClick호출\");\n  };\n  useEffect(() => {\n    console.log('Componen re-rendered');\n    setTimeout(() => {\n      setState(1);\n      console.log('updated');\n    }, 1000);\n  }, []); // Only re-render when state changes\n  // 두 번째 파라미터는 의존성 배열이다.\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(RenderingUI1212, {\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(BlogApp, \"rTLOxV2ROLFIFUMHWk9W3pFX53M=\");\n_c = BlogApp;\nexport default BlogApp;\n/* \n  상태는 바뀌었는데 이 바뀐 상태가 RenderingUI와 아무 상관이 없다.\n  심지어 state를 사용하고 있지도 않다.\n  그런데 state가 변경됨에 의해서 이 BlogApp.jsx파일은 다시 실행이 됐고\n  그 과정에서 RenderingUI1212 컴포넌트도 다시 실행이 되서 무려 100번 실행이 되었다.\n  \n  그럼 이 경우에는 왜 문제가 발생했나?\n  첫번째는 \n*/\nvar _c;\n$RefreshReg$(_c, \"BlogApp\");","map":{"version":3,"names":["Fragment","useEffect","useState","RenderingUI1212","jsxDEV","_jsxDEV","_Fragment","BlogApp","_s","state","setState","console","log","handleClick","setTimeout","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Java/workspace_react/render-phase1/src/BlogApp.jsx"],"sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\nimport RenderingUI1212 from \"./conmponents1212/RenderingUI1212\";\n\nconst BlogApp = () => {\n  const [state, setState] = useState(0)\n  console.log(\"1\")\n  const handleClick = () => {\n    console.log(\"handleClick호출\")\n  }\n\n  useEffect(() =>{\n    console.log('Componen re-rendered')\n    setTimeout(()=>{\n      setState(1)\n      console.log('updated')\n    }, 1000)\n  },[]) // Only re-render when state changes\n  // 두 번째 파라미터는 의존성 배열이다.\n\n  return (\n    <>\n      <RenderingUI1212 onClick={handleClick} />\n    </>\n  );\n}\n\nexport default BlogApp;\n/* \n  상태는 바뀌었는데 이 바뀐 상태가 RenderingUI와 아무 상관이 없다.\n  심지어 state를 사용하고 있지도 않다.\n  그런데 state가 변경됨에 의해서 이 BlogApp.jsx파일은 다시 실행이 됐고\n  그 과정에서 RenderingUI1212 컴포넌트도 다시 실행이 되서 무려 100번 실행이 되었다.\n  \n  그럼 이 경우에는 왜 문제가 발생했나?\n  첫번째는 \n*/"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACrD,OAAOC,eAAe,MAAM,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAL,QAAA,IAAAM,SAAA;AAEhE,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrCS,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EAChB,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBF,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC9B,CAAC;EAEDX,SAAS,CAAC,MAAK;IACbU,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnCE,UAAU,CAAC,MAAI;MACbJ,QAAQ,CAAC,CAAC,CAAC;MACXC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACxB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAC,EAAE,CAAC,EAAC;EACN;;EAEA,oBACEP,OAAA,CAAAC,SAAA;IAAAS,QAAA,eACEV,OAAA,CAACF,eAAe;MAACa,OAAO,EAAEH;IAAY;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACzC,CAAC;AAEP,CAAC;AAAAZ,EAAA,CArBKD,OAAO;AAAAc,EAAA,GAAPd,OAAO;AAuBb,eAAeA,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}