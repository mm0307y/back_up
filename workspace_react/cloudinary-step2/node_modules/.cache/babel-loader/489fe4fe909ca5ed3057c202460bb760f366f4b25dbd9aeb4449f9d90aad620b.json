{"ast":null,"code":"import { getAuth, GithubAuthProvider,\n//깃헙으로 로그인할때\nGoogleAuthProvider,\n//구글에서 제공하는 제공자정보\nsignInWithPopup //구글 로그인 인증 화면 띄움\n} from \"firebase/auth\";\nclass AuthLogic {\n  //클래스 선언하기\n  constructor() {\n    this.getUserAuth = () => {\n      return this.auth;\n    };\n    this.getGoogleAuthProvider = () => {\n      return this.googleProvider;\n    };\n    //생성자함수 - 바닐라에서는 같은 이름함수를 지원하지 않음\n    this.auth = getAuth();\n    this.gitProvider = new GithubAuthProvider();\n    this.googleProvider = new GoogleAuthProvider();\n  }\n} //end of AuthLogic\nexport default AuthLogic; //index.js에서 참조할 수 있도록 export하였다 - module - ES6\n\nexport const onAuthChange = auth => {\n  return new Promise(resolve => {\n    auth.onAuthStateChanged(user => {\n      resolve(user);\n    }); //end of onAuthStateChanged - 로그인 상태가 풀렸는지 체크하여 콜백함수에 파라미터로 사용자 정보를 쥐어줌\n  }); //end of Promise\n}; //end of onAuthChange\n\nexport const loginGoogle = (auth, googleProvider) => {\n  console.log(\"loginGoogle호출 성공\");\n  console.log(googleProvider);\n  return new Promise((resolve, reject) => {\n    signInWithPopup(auth, googleProvider) //인증되는 동안에 지연이 발생할 수 있다\n    .then(result => {\n      //내가 구글회원이라면 프로필 정보가 있다\n      console.log(result); //object Object - 안보임 - uid, displayName-realname, email\n      console.log(JSON.stringify(result)); //[object, Object]\n      const user = result.user;\n      console.log(user.uid);\n      resolve(user);\n    }).catch(error => reject(error));\n  });\n}; //end of loginGoogle\n\nexport const logout = auth => {\n  return new Promise((resolve, reject) => {\n    auth.signOut().catch(e => reject(alert(e + \": 로그아웃 오류입니다.\")));\n    resolve();\n  });\n};","map":{"version":3,"names":["getAuth","GithubAuthProvider","GoogleAuthProvider","signInWithPopup","AuthLogic","constructor","getUserAuth","auth","getGoogleAuthProvider","googleProvider","gitProvider","onAuthChange","Promise","resolve","onAuthStateChanged","user","loginGoogle","console","log","reject","then","result","JSON","stringify","uid","catch","error","logout","signOut","e","alert"],"sources":["D:/Java/workspace_react/cloudinary-step2/src/service/authLogic.js"],"sourcesContent":["import {\r\n  getAuth,\r\n  GithubAuthProvider, //깃헙으로 로그인할때\r\n  GoogleAuthProvider, //구글에서 제공하는 제공자정보\r\n  signInWithPopup, //구글 로그인 인증 화면 띄움\r\n} from \"firebase/auth\";\r\nclass AuthLogic {\r\n  //클래스 선언하기\r\n  constructor() {\r\n    //생성자함수 - 바닐라에서는 같은 이름함수를 지원하지 않음\r\n    this.auth = getAuth();\r\n    this.gitProvider = new GithubAuthProvider();\r\n    this.googleProvider = new GoogleAuthProvider();\r\n  }\r\n  getUserAuth = () => {\r\n    return this.auth;\r\n  };\r\n  getGoogleAuthProvider = () => {\r\n    return this.googleProvider;\r\n  };\r\n} //end of AuthLogic\r\nexport default AuthLogic; //index.js에서 참조할 수 있도록 export하였다 - module - ES6\r\n\r\nexport const onAuthChange = (auth) => {\r\n  return new Promise((resolve) => {\r\n    auth.onAuthStateChanged((user) => {\r\n      resolve(user);\r\n    }); //end of onAuthStateChanged - 로그인 상태가 풀렸는지 체크하여 콜백함수에 파라미터로 사용자 정보를 쥐어줌\r\n  }); //end of Promise\r\n}; //end of onAuthChange\r\n\r\nexport const loginGoogle = (auth, googleProvider) => {\r\n  console.log(\"loginGoogle호출 성공\");\r\n  console.log(googleProvider);\r\n  return new Promise((resolve, reject) => {\r\n    signInWithPopup(auth, googleProvider) //인증되는 동안에 지연이 발생할 수 있다\r\n      .then((result) => {\r\n        //내가 구글회원이라면 프로필 정보가 있다\r\n        console.log(result); //object Object - 안보임 - uid, displayName-realname, email\r\n        console.log(JSON.stringify(result)); //[object, Object]\r\n        const user = result.user;\r\n        console.log(user.uid);\r\n        resolve(user);\r\n      })\r\n      .catch((error) => reject(error));\r\n  });\r\n}; //end of loginGoogle\r\n\r\nexport const logout = (auth) => {\r\n  return new Promise((resolve, reject) => {\r\n    auth.signOut().catch((e) => reject(alert(e + \": 로그아웃 오류입니다.\")));\r\n    resolve();\r\n  });\r\n};\r\n"],"mappings":"AAAA,SACEA,OAAO,EACPC,kBAAkB;AAAE;AACpBC,kBAAkB;AAAE;AACpBC,eAAe,CAAE;AAAA,OACZ,eAAe;AACtB,MAAMC,SAAS,CAAC;EACd;EACAC,WAAWA,CAAA,EAAG;IAAA,KAMdC,WAAW,GAAG,MAAM;MAClB,OAAO,IAAI,CAACC,IAAI;IAClB,CAAC;IAAA,KACDC,qBAAqB,GAAG,MAAM;MAC5B,OAAO,IAAI,CAACC,cAAc;IAC5B,CAAC;IAVC;IACA,IAAI,CAACF,IAAI,GAAGP,OAAO,CAAC,CAAC;IACrB,IAAI,CAACU,WAAW,GAAG,IAAIT,kBAAkB,CAAC,CAAC;IAC3C,IAAI,CAACQ,cAAc,GAAG,IAAIP,kBAAkB,CAAC,CAAC;EAChD;AAOF,CAAC,CAAC;AACF,eAAeE,SAAS,CAAC,CAAC;;AAE1B,OAAO,MAAMO,YAAY,GAAIJ,IAAI,IAAK;EACpC,OAAO,IAAIK,OAAO,CAAEC,OAAO,IAAK;IAC9BN,IAAI,CAACO,kBAAkB,CAAEC,IAAI,IAAK;MAChCF,OAAO,CAACE,IAAI,CAAC;IACf,CAAC,CAAC,CAAC,CAAC;EACN,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;;AAEH,OAAO,MAAMC,WAAW,GAAGA,CAACT,IAAI,EAAEE,cAAc,KAAK;EACnDQ,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/BD,OAAO,CAACC,GAAG,CAACT,cAAc,CAAC;EAC3B,OAAO,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEM,MAAM,KAAK;IACtChB,eAAe,CAACI,IAAI,EAAEE,cAAc,CAAC,CAAC;IAAA,CACnCW,IAAI,CAAEC,MAAM,IAAK;MAChB;MACAJ,OAAO,CAACC,GAAG,CAACG,MAAM,CAAC,CAAC,CAAC;MACrBJ,OAAO,CAACC,GAAG,CAACI,IAAI,CAACC,SAAS,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;MACrC,MAAMN,IAAI,GAAGM,MAAM,CAACN,IAAI;MACxBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAACS,GAAG,CAAC;MACrBX,OAAO,CAACE,IAAI,CAAC;IACf,CAAC,CAAC,CACDU,KAAK,CAAEC,KAAK,IAAKP,MAAM,CAACO,KAAK,CAAC,CAAC;EACpC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;;AAEH,OAAO,MAAMC,MAAM,GAAIpB,IAAI,IAAK;EAC9B,OAAO,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEM,MAAM,KAAK;IACtCZ,IAAI,CAACqB,OAAO,CAAC,CAAC,CAACH,KAAK,CAAEI,CAAC,IAAKV,MAAM,CAACW,KAAK,CAACD,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IAC/DhB,OAAO,CAAC,CAAC;EACX,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}