{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mtwd9\\\\Desktop\\\\Java\\\\workspace_react\\\\cloudinary-step2\\\\src\\\\components\\\\page\\\\Marker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Header from '../include/Header';\nimport Footer from '../include/Footer';\nimport { logout, onAuthChange } from '../../service/authLogic';\nimport { useNavigate } from 'react-router-dom';\nimport CardEditor from './CardEditor';\nimport Preview from './Preview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MarkerDiv = styled.div`\n    width: 100%;\n    height: 100%;\n    max-width: 80rem;\n    display: flex;\n    flex-direction: column;\n    background-color: makerWhite;\n`;\n_c = MarkerDiv;\nconst ContainerDiv = styled.div`\n  display: flex;\n  flex: 1; /* 중간에 여백을 가득채우도록 1을 준다 */\n  min-height: 0;\n`;\n_c2 = ContainerDiv;\nconst Marker = ({\n  FileInput,\n  authLogic,\n  cardLogic\n}) => {\n  _s();\n  const [cards, setCards] = useState({});\n  const navigate = useNavigate();\n  const [userId, setUserId] = useState();\n  //로그아웃 후에 저장소에 있는 네임카드 정보를 가져오는 코드가 필요하다.\n  //useEffect도 훅이다. 업무별로 여러개를 만들 수 있다.\n  //우리가 원하는 것은 Marker라는 컴포넌트가 마운트 되었을 때 또는 사용자의 아이디가\n  //변경되었을 때 계속 동기화 되기를 원한다.\n  //사용자 아이디가 있을 때만 우리가 정의한 carLogic에 있는 syncCards라는 함수를 호출한다.\n  useEffect(() => {\n    console.log('syncCards effect');\n    if (!userId) {\n      return;\n    }\n    const stopSync = cardLogic.syncCards(userId, cards => {\n      setCards(cards);\n    });\n    //stopSync함수를 리턴하게 되면 cardLogic.js의 syncCards함수의 off()함수가\n    //호출되서 그냥 꺼집니다.\n    return () => stopSync();\n  }, [userId, cardLogic]); //두번째 파라미터는 의존성 배열임\n\n  useEffect(() => {\n    console.log('effect');\n    const loginCheck = async () => {\n      const user = await onAuthChange(authLogic.auth);\n      if (user) {\n        setUserId(user.uid);\n      } else {\n        navigate(\"/\");\n      }\n    }; //end of loginCheck\n    loginCheck();\n  }); //일부러 의존배열은 적지 않았다. 모든 변화에 상태를 추적해야 하니까....  \n  const onLogout = async () => {\n    console.log('onLogout');\n    await logout(authLogic.auth);\n    navigate('/');\n  };\n  const createOrUpdateCard = card => {\n    console.log(card); // 단위테스트: 전달받은 것 호출해 보기\n    // 이전에 상태값을 받아서 새로운 값을 하는 이런 콜백함수로도 이용이 가능합니다 \n    // 새로 업데이트 되는 card를 변경해 주고 리턴은 업데이트된 아이를 리턴해줘야겠죠\n    setCards(cards => {\n      console.log(cards); //추가되기 전 cards정보\n      const updated = {\n        ...cards\n      };\n      console.log(updated);\n      // 어차피 여기서 id가 오브젝트에 없었다면 새로운 것이 추가가 되어져요\n      // 그래서 addCard는 필요가 없어요\n      updated[card.id] = card;\n      return updated;\n    });\n    //Realtime Database에 저장하기 추가\n    console.log(`${userId}, ${card}`);\n    cardLogic.saveCard(userId, card);\n  };\n  const deleteCard = card => {\n    console.log(card); // 단위테스트: 전달받은 것 호출해 보기\n    setCards(cards => {\n      const updated = {\n        ...cards\n      };\n      delete updated[card.id];\n      return updated;\n    });\n    console.log(`삭제 카드 card.id ${card.id}`);\n    cardLogic.removeCard(userId, card);\n  };\n  return /*#__PURE__*/_jsxDEV(MarkerDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onLogout: onLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContainerDiv, {\n      children: [/*#__PURE__*/_jsxDEV(CardEditor, {\n        FileInput: FileInput,\n        cards: cards,\n        addCard: createOrUpdateCard,\n        updateCard: createOrUpdateCard,\n        deleteCard: deleteCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {\n        cards: cards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(Marker, \"z4nSQKIMWYeBFw3MuR4l+Md92Ko=\", false, function () {\n  return [useNavigate];\n});\n_c3 = Marker;\nexport default Marker;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MarkerDiv\");\n$RefreshReg$(_c2, \"ContainerDiv\");\n$RefreshReg$(_c3, \"Marker\");","map":{"version":3,"names":["React","useEffect","useState","styled","Header","Footer","logout","onAuthChange","useNavigate","CardEditor","Preview","jsxDEV","_jsxDEV","MarkerDiv","div","_c","ContainerDiv","_c2","Marker","FileInput","authLogic","cardLogic","_s","cards","setCards","navigate","userId","setUserId","console","log","stopSync","syncCards","loginCheck","user","auth","uid","onLogout","createOrUpdateCard","card","updated","id","saveCard","deleteCard","removeCard","children","fileName","_jsxFileName","lineNumber","columnNumber","addCard","updateCard","_c3","$RefreshReg$"],"sources":["C:/Users/mtwd9/Desktop/Java/workspace_react/cloudinary-step2/src/components/page/Marker.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Header from '../include/Header'\r\nimport Footer from '../include/Footer'\r\nimport { logout, onAuthChange } from '../../service/authLogic'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport CardEditor from './CardEditor'\r\nimport Preview from './Preview'\r\n\r\nconst MarkerDiv = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    max-width: 80rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: makerWhite;\r\n`\r\nconst ContainerDiv = styled.div`\r\n  display: flex;\r\n  flex: 1; /* 중간에 여백을 가득채우도록 1을 준다 */\r\n  min-height: 0;\r\n`\r\n\r\nconst Marker = ({ FileInput, authLogic, cardLogic }) => {\r\n  const [cards, setCards] = useState({});    \r\n  const navigate = useNavigate();\r\n  const [userId, setUserId] = useState();\r\n  //로그아웃 후에 저장소에 있는 네임카드 정보를 가져오는 코드가 필요하다.\r\n  //useEffect도 훅이다. 업무별로 여러개를 만들 수 있다.\r\n  //우리가 원하는 것은 Marker라는 컴포넌트가 마운트 되었을 때 또는 사용자의 아이디가\r\n  //변경되었을 때 계속 동기화 되기를 원한다.\r\n  //사용자 아이디가 있을 때만 우리가 정의한 carLogic에 있는 syncCards라는 함수를 호출한다.\r\n  useEffect(() => {\r\n    console.log('syncCards effect')\r\n    if(!userId) {\r\n      return;\r\n    }\r\n    const stopSync = cardLogic.syncCards(userId, cards => {\r\n      setCards(cards)\r\n    })\r\n    //stopSync함수를 리턴하게 되면 cardLogic.js의 syncCards함수의 off()함수가\r\n    //호출되서 그냥 꺼집니다.\r\n    return () => stopSync()\r\n  },[userId, cardLogic])//두번째 파라미터는 의존성 배열임\r\n\r\n  useEffect(()=>{\r\n      console.log('effect');\r\n      const loginCheck = async() => {\r\n          const user = await onAuthChange(authLogic.auth);\r\n          if(user){\r\n            setUserId(user.uid);\r\n          }else{\r\n            navigate(\"/\");\r\n          }\r\n      }//end of loginCheck\r\n      loginCheck();\r\n  })//일부러 의존배열은 적지 않았다. 모든 변화에 상태를 추적해야 하니까....  \r\n  const onLogout = async() => {\r\n    console.log('onLogout');\r\n    await logout(authLogic.auth);\r\n    navigate('/');\r\n  }\r\n\r\n  const createOrUpdateCard = card => {\r\n    console.log(card);// 단위테스트: 전달받은 것 호출해 보기\r\n    // 이전에 상태값을 받아서 새로운 값을 하는 이런 콜백함수로도 이용이 가능합니다 \r\n    // 새로 업데이트 되는 card를 변경해 주고 리턴은 업데이트된 아이를 리턴해줘야겠죠\r\n    setCards(cards => {\r\n      console.log(cards);//추가되기 전 cards정보\r\n      const updated = { ...cards };\r\n      console.log(updated);\r\n      // 어차피 여기서 id가 오브젝트에 없었다면 새로운 것이 추가가 되어져요\r\n      // 그래서 addCard는 필요가 없어요\r\n      updated[card.id] = card;\r\n      return updated;\r\n    });\r\n    //Realtime Database에 저장하기 추가\r\n    console.log(`${userId}, ${card}`)\r\n    cardLogic.saveCard(userId, card)\r\n  }  \r\n  const deleteCard = (card) => {\r\n    console.log(card); // 단위테스트: 전달받은 것 호출해 보기\r\n    setCards((cards) => {\r\n      const updated = { ...cards };\r\n      delete updated[card.id];\r\n      return updated;\r\n    });\r\n    console.log(`삭제 카드 card.id ${card.id}`);\r\n    cardLogic.removeCard(userId, card)\r\n  };\r\n  return (\r\n    <MarkerDiv>\r\n      <Header onLogout={onLogout} />\r\n      <ContainerDiv>\r\n        <CardEditor FileInput={FileInput} cards={cards} addCard={createOrUpdateCard} updateCard={createOrUpdateCard} deleteCard={deleteCard} />\r\n        <Preview cards={cards} />\r\n      </ContainerDiv>\r\n      <Footer />\r\n    </MarkerDiv>\r\n  )\r\n}\r\n\r\nexport default Marker"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}