{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mtwd9\\\\Desktop\\\\Java\\\\workspace_react\\\\youtube-step1\\\\src\\\\YoutubeApp1213.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { Fragment, useEffect, useState } from \"react\";\nimport YoutubList1213 from \"./components1213/YoutubList1213\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YoutubeApp1213 = () => {\n  _s();\n  console.log('YoutubeApp1213');\n  const [videos, setVideos] = useState([]);\n  const [params, setParams] = useState({\n    part: 'snippet',\n    chart: 'mostPopular',\n    maxResults: 25,\n    key: \"AIzaSyB3s74a5_0cgFU2HvL8O-eBsGLugxx9w94\"\n  });\n  useEffect(() => {\n    console.log('effect');\n    axios.get('', {\n      params\n    });\n    axios.get('https://www.googleapis.com/youtube/v3/videos?', {\n      params\n    }).then(result => {\n      setVideos(result.data.items);\n    }).catch(error => console.log(error));\n  }, []); // 의존성배열리 깡통이면 최초 한번만 실행된다.\n  console.log(videos);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(YoutubList1213, {\n      videos: videos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(YoutubeApp1213, \"415P8dBK+VcLPEaCZunMWmBsdP0=\");\n_c = YoutubeApp1213;\nexport default YoutubeApp1213;\n/* 유튜브 서버에 인기동영상 요청하기\r\n다른 외부서버에 요청할 때 restful API사용 - GET방식요청 한다. - 퀴리스트링한다.\r\n외부 서버에 요청시에는 비동기 처리할 것.\r\nnew Promise는 바닐라 스크립트 제공한다.\r\naxios 라이브러리 사용한다.\r\n요청 결과로 배열을 받아서 useState에 담는다. - setter함수 사용한다.\r\n두번째 파라미터 자리가  setter 함수 자리이다.\r\n저장할 때 사용하고 값을 추가하는 방법은 파라미터를 사용한다.\r\n상속관계 표현해 본다.\r\nYoutubeApp1213 -> YoutubeList1213 -> YoutubeItem1213\r\n상위 노드에서 하위 노드로 주소번지를 \r\n */\nvar _c;\n$RefreshReg$(_c, \"YoutubeApp1213\");","map":{"version":3,"names":["axios","Fragment","useEffect","useState","YoutubList1213","jsxDEV","_jsxDEV","YoutubeApp1213","_s","console","log","videos","setVideos","params","setParams","part","chart","maxResults","key","get","then","result","data","items","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mtwd9/Desktop/Java/workspace_react/youtube-step1/src/YoutubeApp1213.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport YoutubList1213 from \"./components1213/YoutubList1213\";\r\n\r\nconst YoutubeApp1213 = () => {\r\n  console.log('YoutubeApp1213')\r\n\r\n  const [videos, setVideos] = useState([])\r\n  const [params, setParams] = useState({\r\n    part: 'snippet',\r\n    chart: 'mostPopular',\r\n    maxResults: 25,\r\n    key: \"AIzaSyB3s74a5_0cgFU2HvL8O-eBsGLugxx9w94\"\r\n  })\r\n\r\n  useEffect(() => {\r\n    console.log('effect')\r\n    axios.get('', { params })\r\n    axios.get('https://www.googleapis.com/youtube/v3/videos?', { params })\r\n      .then(result => {\r\n        setVideos(result.data.items)\r\n      }).catch(error => console.log(error))\r\n  }, []) // 의존성배열리 깡통이면 최초 한번만 실행된다.\r\n  console.log(videos)\r\n\r\n  return (\r\n    <Fragment>\r\n      <YoutubList1213 videos={videos} />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default YoutubeApp1213;\r\n/* 유튜브 서버에 인기동영상 요청하기\r\n다른 외부서버에 요청할 때 restful API사용 - GET방식요청 한다. - 퀴리스트링한다.\r\n외부 서버에 요청시에는 비동기 처리할 것.\r\nnew Promise는 바닐라 스크립트 제공한다.\r\naxios 라이브러리 사용한다.\r\n요청 결과로 배열을 받아서 useState에 담는다. - setter함수 사용한다.\r\n두번째 파라미터 자리가  setter 함수 자리이다.\r\n저장할 때 사용하고 값을 추가하는 방법은 파라미터를 사용한다.\r\n상속관계 표현해 본다.\r\nYoutubeApp1213 -> YoutubeList1213 -> YoutubeItem1213\r\n상위 노드에서 하위 노드로 주소번지를 \r\n */"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACrD,OAAOC,cAAc,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAE7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC;IACnCY,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,aAAa;IACpBC,UAAU,EAAE,EAAE;IACdC,GAAG,EAAE;EACP,CAAC,CAAC;EAEFhB,SAAS,CAAC,MAAM;IACdO,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrBV,KAAK,CAACmB,GAAG,CAAC,EAAE,EAAE;MAAEN;IAAO,CAAC,CAAC;IACzBb,KAAK,CAACmB,GAAG,CAAC,+CAA+C,EAAE;MAAEN;IAAO,CAAC,CAAC,CACnEO,IAAI,CAACC,MAAM,IAAI;MACdT,SAAS,CAACS,MAAM,CAACC,IAAI,CAACC,KAAK,CAAC;IAC9B,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAIhB,OAAO,CAACC,GAAG,CAACe,KAAK,CAAC,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC,EAAC;EACPhB,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;EAEnB,oBACEL,OAAA,CAACL,QAAQ;IAAAyB,QAAA,eACPpB,OAAA,CAACF,cAAc;MAACO,MAAM,EAAEA;IAAO;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEf,CAAC;AAAAtB,EAAA,CA1BKD,cAAc;AAAAwB,EAAA,GAAdxB,cAAc;AA4BpB,eAAeA,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}