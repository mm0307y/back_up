{"ast":null,"code":"import { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nclass AuthLogic0110 {\n  // 생성자 함수\n  constructor() {\n    // 생성자 함수에 초기화된 멤버변수를 외부에서 사용할 때 활용한다.\n    this.getUserAuth = () => {\n      return this.auth;\n    };\n    // 생성자 함수에 초기회된 멤버변수를 외부에서 사용할 때 활용한다.\n    this.getGoogleProvider = () => {\n      return this.googleProvider;\n    };\n    this.auth = getAuth();\n    this.googleProvider = new GoogleAuthProvider();\n    // this.githubProvider = new GithubAuthProvider();\n  }\n} //// end of AuthLogic\n\nexport default AuthLogic0110;\n\n// 외부에서 아래 함수를 호출하려면 함수 선언시 export를 붙여야 한다.\n// 3000번 리액트서버에 구글 서버(firebase)측에 파라미터로 auth객체, 벤더 이름\n// 화살표 함수 - 람다식(자바표현식 - 스프링 시큐리티)\n// 구글에서 제공하는 소셜로그인 기능을 활용하기 위해서 API를 확인한다.\n// 팝업으로 정보제공을 해준다. -> 파라미터가 2개 필요하다. -> getAuth(), 서비스 제공 업체정보가 필요하다.\n// loginGoogle 사용자 함수 안에서 구글이 제공하는 signlnWithPopup함수를 호출해야 한다.\n// 이 때 함수의 파라미터 자리에 두가지 정보가 필요하다.\n// 개발자가 signinWithPopup함수를 호출하면 구글서버측에서 요청을 청취한다.\n// waition(기다려 - 시간이 걸린다. - 비동기처리) - new Promise -> 처리가 되고 있는지 체크 한다. - 0-1-2-3-4\n// 처리완료 -> 다운로드(4) -> result값이 담긴다.\n// result에 무엇을 담아 주엇을까? 누가 -> firebase 인증팀\n// result -> {user:{uid:abc, name:홍길동, email:XXX@hot.com, others:{키:값, 키:값 ...}}}\nexport const loginGoogle = (auth, googleProvider) => {\n  return new Promise((resolve, reject) => {\n    signInWithPopup(auth, googleProvider).then(res => {\n      console.log(res.user.name);\n    });\n  });\n}; //// end of loginGoogle","map":{"version":3,"names":["getAuth","GoogleAuthProvider","signInWithPopup","AuthLogic0110","constructor","getUserAuth","auth","getGoogleProvider","googleProvider","loginGoogle","Promise","resolve","reject","then","res","console","log","user","name"],"sources":["D:/Java/workspace_jsp/react-step1/src/service/authLogic0110.js"],"sourcesContent":["import { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\n\r\nclass AuthLogic0110 {\r\n  // 생성자 함수\r\n  constructor() {\r\n    this.auth = getAuth();\r\n    this.googleProvider = new GoogleAuthProvider();\r\n    // this.githubProvider = new GithubAuthProvider();\r\n  }\r\n\r\n  // 생성자 함수에 초기화된 멤버변수를 외부에서 사용할 때 활용한다.\r\n  getUserAuth = () => {\r\n    return this.auth;\r\n  };\r\n\r\n  // 생성자 함수에 초기회된 멤버변수를 외부에서 사용할 때 활용한다.\r\n  getGoogleProvider = () => {\r\n    return this.googleProvider;\r\n  }\r\n} //// end of AuthLogic\r\n\r\nexport default AuthLogic0110;\r\n\r\n// 외부에서 아래 함수를 호출하려면 함수 선언시 export를 붙여야 한다.\r\n// 3000번 리액트서버에 구글 서버(firebase)측에 파라미터로 auth객체, 벤더 이름\r\n// 화살표 함수 - 람다식(자바표현식 - 스프링 시큐리티)\r\n// 구글에서 제공하는 소셜로그인 기능을 활용하기 위해서 API를 확인한다.\r\n// 팝업으로 정보제공을 해준다. -> 파라미터가 2개 필요하다. -> getAuth(), 서비스 제공 업체정보가 필요하다.\r\n// loginGoogle 사용자 함수 안에서 구글이 제공하는 signlnWithPopup함수를 호출해야 한다.\r\n// 이 때 함수의 파라미터 자리에 두가지 정보가 필요하다.\r\n// 개발자가 signinWithPopup함수를 호출하면 구글서버측에서 요청을 청취한다.\r\n// waition(기다려 - 시간이 걸린다. - 비동기처리) - new Promise -> 처리가 되고 있는지 체크 한다. - 0-1-2-3-4\r\n// 처리완료 -> 다운로드(4) -> result값이 담긴다.\r\n// result에 무엇을 담아 주엇을까? 누가 -> firebase 인증팀\r\n// result -> {user:{uid:abc, name:홍길동, email:XXX@hot.com, others:{키:값, 키:값 ...}}}\r\nexport const loginGoogle = (auth, googleProvider) => {\r\n  return new Promise((resolve, reject)=>{\r\n    signInWithPopup(auth, googleProvider).then((res)=>{\r\n      console.log(res.user.name);\r\n      \r\n    })\r\n  })\r\n\r\n} //// end of loginGoogle\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,QAAQ,eAAe;AAE5E,MAAMC,aAAa,CAAC;EAClB;EACAC,WAAWA,CAAA,EAAG;IAMd;IAAA,KACAC,WAAW,GAAG,MAAM;MAClB,OAAO,IAAI,CAACC,IAAI;IAClB,CAAC;IAED;IAAA,KACAC,iBAAiB,GAAG,MAAM;MACxB,OAAO,IAAI,CAACC,cAAc;IAC5B,CAAC;IAbC,IAAI,CAACF,IAAI,GAAGN,OAAO,CAAC,CAAC;IACrB,IAAI,CAACQ,cAAc,GAAG,IAAIP,kBAAkB,CAAC,CAAC;IAC9C;EACF;AAWF,CAAC,CAAC;;AAEF,eAAeE,aAAa;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,WAAW,GAAGA,CAACH,IAAI,EAAEE,cAAc,KAAK;EACnD,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAG;IACpCV,eAAe,CAACI,IAAI,EAAEE,cAAc,CAAC,CAACK,IAAI,CAAEC,GAAG,IAAG;MAChDC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,IAAI,CAACC,IAAI,CAAC;IAE5B,CAAC,CAAC;EACJ,CAAC,CAAC;AAEJ,CAAC,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}