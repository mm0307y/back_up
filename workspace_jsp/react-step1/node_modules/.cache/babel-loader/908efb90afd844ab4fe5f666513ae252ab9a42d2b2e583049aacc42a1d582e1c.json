{"ast":null,"code":"import { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nclass AuthLogic0110 {\n  // 생성자 함수\n  constructor() {\n    // 생성자 함수에 초기화된 멤버변수를 외부에서 사용할 때 활용한다.\n    this.getUserAuth = () => {\n      return this.auth;\n    };\n    // 생성자 함수에 초기회된 멤버변수를 외부에서 사용할 때 활용한다.\n    this.getGoogleProvider = () => {\n      return this.googleProvider;\n    };\n    this.auth = getAuth();\n    this.googleProvider = new GoogleAuthProvider();\n    // this.githubProvider = new GithubAuthProvider();\n  }\n} //// end of AuthLogic\n\nexport default AuthLogic0110;\n\n// 외부에서 아래 함수를 호출하려면 함수 선언시 export를 붙여야 한다.\n// 3000번 리액트서버에 구글 서버(firebase)측에 파라미터로 auth객체, 벤더 이름\n// 화살표 함수 - 람다식(자바표현식 - 스프링 시큐리티)\n// 구글에서 제공하는 소셜로그인 기능을 활용하기 위해서 API를 확인한다.\n// 팝업으로 정보제공을 해준다. -> 파라미터가 2개 필요하다. -> getAuth(), 서비스 제공 업체정보가 필요하다.\n// loginGoogle 사용자 함수 안에서 구글이 제공하는 signlnWithPopup함수를 호출해야 한다.\n// 이 때 함수의 파라미터 자리에 두가지 정보가 필요하다.\n// 개발자가 signinWithPopup함수를 호출하면 구글서버측에서 요청을 청취한다.\n// waition(기다려 - 시간이 걸린다. - 비동기처리) - new Promise -> 처리가 되고 있는지 체크 한다. - 0-1-2-3-4\n// 처리완료 -> 다운로드(4) -> result값이 담긴다.\n// result에 무엇을 담아 주엇을까? 누가 -> firebase 인증팀\n// result -> {user:{uid:abc, name:홍길동, email:XXX@hot.com, others:{키:값, 키:값, ...}}}\n// 파라미터를 맞춘다. -> 파라미터 자리에 구글 서버에 채워줄께\nexport const loginGoogle = (auth, googleProvider) => {\n  return new Promise((resolve, reject) => {\n    signInWithPopup(auth, googleProvider)\n    // .then(res)=> console.log(res.user.name))\n    .then(res => {\n      // 인증에 성공하면 구글측에서 resolve함수를 호추랗고 실패하면 reject함수를 호출한다.\n      // 화살표 함수의 리턴 자리에 좌, 우중괄호를 쓰면 실행문(변수, 조건문, 반복문)이 오는 자리이다.\n      const user = res.user; // user는 어디에서 확인되나요?\n\n      // 브라우저 메모리에 저장\n      localStorage.setItem(\"uid\", user.uid);\n      localStorage.setItem(\"uid\", user.email);\n      resolve(user);\n    }).catch(err => {\n      reject(err); // err을 출력하면 힌트얻기 - 디버깅\n    });\n  });\n}; //// end of loginGoogle\n\n// 로그아웃을 구글 서버에 요청하기 -> 기다림 -> 응답을 받아오기 -> 대기\n// resolve뒤에 괄호가 없는데 함수가 맞나요? 네 -> 일급함수\n// resolve와 reject은 둘다 함수가 맞다. -> 이 둘은 누가 언제 왜 호출하나요?\n// 처리는 구구글 서버 리턴 함수의 파라미터 자리에 두 개의 함수 이름을 개발자 네가 정해서\n// 호출해줘 -> 성공하면 resolve call, 실패하면 reject호출 할께\nexport const logout = auth => {\n  // 함수 안에서 return으로 함수를 줄 수 있는거야? - 고차함수라 가능하다.\n  return new Promise((resolve, reject) => {\n    auth.signOut().then;\n  });\n};","map":{"version":3,"names":["getAuth","GoogleAuthProvider","signInWithPopup","AuthLogic0110","constructor","getUserAuth","auth","getGoogleProvider","googleProvider","loginGoogle","Promise","resolve","reject","then","res","user","localStorage","setItem","uid","email","catch","err","logout","signOut"],"sources":["D:/Java/workspace_jsp/react-step1/src/service/authLogic0110.js"],"sourcesContent":["import { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\n\r\nclass AuthLogic0110 {\r\n  // 생성자 함수\r\n  constructor() {\r\n    this.auth = getAuth();\r\n    this.googleProvider = new GoogleAuthProvider();\r\n    // this.githubProvider = new GithubAuthProvider();\r\n  }\r\n\r\n  // 생성자 함수에 초기화된 멤버변수를 외부에서 사용할 때 활용한다.\r\n  getUserAuth = () => {\r\n    return this.auth;\r\n  };\r\n\r\n  // 생성자 함수에 초기회된 멤버변수를 외부에서 사용할 때 활용한다.\r\n  getGoogleProvider = () => {\r\n    return this.googleProvider;\r\n  };\r\n} //// end of AuthLogic\r\n\r\nexport default AuthLogic0110;\r\n\r\n// 외부에서 아래 함수를 호출하려면 함수 선언시 export를 붙여야 한다.\r\n// 3000번 리액트서버에 구글 서버(firebase)측에 파라미터로 auth객체, 벤더 이름\r\n// 화살표 함수 - 람다식(자바표현식 - 스프링 시큐리티)\r\n// 구글에서 제공하는 소셜로그인 기능을 활용하기 위해서 API를 확인한다.\r\n// 팝업으로 정보제공을 해준다. -> 파라미터가 2개 필요하다. -> getAuth(), 서비스 제공 업체정보가 필요하다.\r\n// loginGoogle 사용자 함수 안에서 구글이 제공하는 signlnWithPopup함수를 호출해야 한다.\r\n// 이 때 함수의 파라미터 자리에 두가지 정보가 필요하다.\r\n// 개발자가 signinWithPopup함수를 호출하면 구글서버측에서 요청을 청취한다.\r\n// waition(기다려 - 시간이 걸린다. - 비동기처리) - new Promise -> 처리가 되고 있는지 체크 한다. - 0-1-2-3-4\r\n// 처리완료 -> 다운로드(4) -> result값이 담긴다.\r\n// result에 무엇을 담아 주엇을까? 누가 -> firebase 인증팀\r\n// result -> {user:{uid:abc, name:홍길동, email:XXX@hot.com, others:{키:값, 키:값, ...}}}\r\n// 파라미터를 맞춘다. -> 파라미터 자리에 구글 서버에 채워줄께\r\nexport const loginGoogle = (auth, googleProvider) => {\r\n  return new Promise((resolve, reject) => {\r\n    signInWithPopup(auth, googleProvider)\r\n      // .then(res)=> console.log(res.user.name))\r\n      .then((res) => {\r\n        // 인증에 성공하면 구글측에서 resolve함수를 호추랗고 실패하면 reject함수를 호출한다.\r\n        // 화살표 함수의 리턴 자리에 좌, 우중괄호를 쓰면 실행문(변수, 조건문, 반복문)이 오는 자리이다.\r\n        const user = res.user; // user는 어디에서 확인되나요?\r\n\r\n        // 브라우저 메모리에 저장\r\n        localStorage.setItem(\"uid\", user.uid);\r\n        localStorage.setItem(\"uid\", user.email);\r\n        resolve(user);\r\n      })\r\n      .catch((err) => {\r\n        reject(err); // err을 출력하면 힌트얻기 - 디버깅\r\n      });\r\n  });\r\n}; //// end of loginGoogle\r\n\r\n// 로그아웃을 구글 서버에 요청하기 -> 기다림 -> 응답을 받아오기 -> 대기\r\n// resolve뒤에 괄호가 없는데 함수가 맞나요? 네 -> 일급함수\r\n// resolve와 reject은 둘다 함수가 맞다. -> 이 둘은 누가 언제 왜 호출하나요?\r\n// 처리는 구구글 서버 리턴 함수의 파라미터 자리에 두 개의 함수 이름을 개발자 네가 정해서\r\n// 호출해줘 -> 성공하면 resolve call, 실패하면 reject호출 할께\r\nexport const logout = (auth) => {\r\n  // 함수 안에서 return으로 함수를 줄 수 있는거야? - 고차함수라 가능하다.\r\n  return new Promise((resolve, reject) => {\r\n    auth.signOut().then\r\n  });\r\n};\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,QAAQ,eAAe;AAE5E,MAAMC,aAAa,CAAC;EAClB;EACAC,WAAWA,CAAA,EAAG;IAMd;IAAA,KACAC,WAAW,GAAG,MAAM;MAClB,OAAO,IAAI,CAACC,IAAI;IAClB,CAAC;IAED;IAAA,KACAC,iBAAiB,GAAG,MAAM;MACxB,OAAO,IAAI,CAACC,cAAc;IAC5B,CAAC;IAbC,IAAI,CAACF,IAAI,GAAGN,OAAO,CAAC,CAAC;IACrB,IAAI,CAACQ,cAAc,GAAG,IAAIP,kBAAkB,CAAC,CAAC;IAC9C;EACF;AAWF,CAAC,CAAC;;AAEF,eAAeE,aAAa;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,WAAW,GAAGA,CAACH,IAAI,EAAEE,cAAc,KAAK;EACnD,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCV,eAAe,CAACI,IAAI,EAAEE,cAAc;IAClC;IAAA,CACCK,IAAI,CAAEC,GAAG,IAAK;MACb;MACA;MACA,MAAMC,IAAI,GAAGD,GAAG,CAACC,IAAI,CAAC,CAAC;;MAEvB;MACAC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEF,IAAI,CAACG,GAAG,CAAC;MACrCF,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEF,IAAI,CAACI,KAAK,CAAC;MACvCR,OAAO,CAACI,IAAI,CAAC;IACf,CAAC,CAAC,CACDK,KAAK,CAAEC,GAAG,IAAK;MACdT,MAAM,CAACS,GAAG,CAAC,CAAC,CAAC;IACf,CAAC,CAAC;EACN,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAIhB,IAAI,IAAK;EAC9B;EACA,OAAO,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCN,IAAI,CAACiB,OAAO,CAAC,CAAC,CAACV,IAAI;EACrB,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}