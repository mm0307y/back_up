<ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="python-tab" data-bs-toggle="tab" data-bs-target="#tab-pane" type="button"
      role="tab" aria-controls="python-tab-pane" aria-selected="true">파이썬</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="react-tab" data-bs-toggle="tab" data-bs-target="#tab-pane" type="button" role="tab"
      aria-controls="react-tab-pane" aria-selected="false">리액트</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="sql-tab" data-bs-toggle="tab" data-bs-target="#tab-pane" type="button" role="tab"
      aria-controls="sql-tab-pane" aria-selected="false">SQL</button>
  </li>
</ul>
<!-- 
화면을 출력할 때 데이터 카카오서버에서 받아와서 함께 출력해야 합니다.
화면은 준비가 되었지만 화면이 몇번 반복될지는 데이터셋이 결저오디엇을 때야 알 수 가 있다.
태그 내에 데이터를 출력하려면 로우의 숫자만큼 반복되는 것이 맞다.
태그와 자바스크립트 코드를 섞어쓰는 것을 디자이너에게 혼란을 줄 수 있다.
좌, 우 괄호를 디자인하다가 잘 못 붙인다. - 몰라서 - 이럴경우 500번 에러가 발생한다. - 백앤드측 에러라서 잡기가 어렵다.
handlebars 템플릿을 사용하게 되엇다. - 반복문을 태그로 대신할 수 있다.
반복될 태그 블록을 한정하고 script태그로 감싼다. 이 때 타입은 text/x-handlebars-template이다. 표준은 아니다.
이 태그로 감싸진 부분이 반복되는 코드가 되는 것이다.
이 구간안에 {{}} 콧수염 기호 안에 데이터셋을 적는다.
데이터셋과 태그를 머지(매핑)하는 것을 compile함수가 한다.
템플릿 코드 블록이 들어갈 위치를 div태그로 지정해 준다.
innerHTML을 jquery에서는 html(머지(매핑)된)함수로 제공하고 있다.
$("#best_book").html();
-->
<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active" id="tab-pane" role="tabpanel" aria-labelledby="python-tab" tabindex="0">
    <div id="best_book" class="row my-5"></div>
  </div>
</div>

<script type="text/x-handlebars-template" id="temp-best">
{{#each documents}}
<!-- 아래 구간이 n번 반복해야 한다. 원래면 for문 또는 while문을 사용해야 한다. -->
<div class="col-6 col-md-4 col-lg-2">
  <div class="card my-2">
    <div class="card-body">
      <img src="{{image thumbnail}}" index="{{@index}}" alt="도서이미지" style="cursor: pointer;width:80%">
    </div>
  </div>
</div>
<%-include('bookModal_11_27.ejs') %>
  </div>
  {{/each}}
</script>

<script>
  let best = "python"
  getBest()
  $("#python-tab").on("click", () => {
    best = "python"
    getBest()
  })
  $("#react-tab").on("click", () => {
    best = "react"
    getBest()
  })
  $("#sql-tab").on("click", () => {
    best = "SQL"
    getBest()
  })
  function getBest() {
    $.ajax({
      method: "GET",
      url: "https://dapi.kakao.com/v3/search/book?target=title",
      headers: { Authorization: "KakaoAK 6b10a8106270f172344447e5cec8953b" },
      data: { query: best, page: page, size: 6, sort: "latest" }, /* 파라미터로 넘어가는 값 - 노출된다. 그래서 보안이 취약하다. */
      dataType: "json", // 응답으로 받는 타입은 JSON이다. - 왜냐하면 카카오 서버가 나에게 soctt계정과 tiger비밀번호를 알려줄수 없기때문이다.(서버 계정을 알려줄수 없어서)

      success: function (data) { // 성공했다. if(ajax.readyState == 4)
        // 응답으로 받은 정보를 data가 쥐고 있다. data는 json형식이다.
        console.log(data)

        // 응답으로 받은 데이터를 미리 선언해둔 템플릿(화면)에 매핑해준다.(머지)
        let temp = Handlebars.compile($("#temp-best").html())

        // div태그 안에 출력하기 - 시각화
        $("#best_book").html(temp(data))
      },
      error: function (error) {
        console.log(error)
      }
    }); //// end of ajax
  } //// end of getBest()

  $("#best_book").on("click", ".card img", function() {
    let index = $(this).attr("index") // 사용자가 클릭한 이미지의 도서 인덱스 값이 담긴다.
    $(`#best_book #modal${index}`).modal("show")
  })
</script>